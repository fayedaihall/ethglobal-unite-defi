"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/contracts.ts":
/*!****************************!*\
  !*** ./utils/contracts.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContractManager: () => (/* binding */ ContractManager),\n/* harmony export */   createContractManager: () => (/* binding */ createContractManager)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n\n// BetSwap AI Contract ABI (simplified for demo)\nconst BETSWAP_AI_ABI = [\n    \"function placeBet(uint256 eventId, uint256 amount, bool outcome) external\",\n    \"function placeCrossChainBet(uint256 eventId, uint256 amount, bool outcome, string memory nearAccountId) external\",\n    \"function createBetEvent(string memory title, string memory description, uint256 endTime) external\",\n    \"function getBetEvent(uint256 eventId) external view returns (string memory, string memory, uint256, uint256, bool, bool)\",\n    \"function resolveBetWithAI(uint256 eventId, uint256 confidence) external\",\n    \"function calculateOdds(bytes32 eventId) external view returns (uint256 yesOdds, uint256 noOdds)\",\n    \"function getCurrentOdds(bytes32 eventId, bool outcome) external view returns (uint256)\",\n    \"function getBettingStats(bytes32 eventId) external view returns (uint256 total, uint256 yes, uint256 no, uint256 yesOdds, uint256 noOdds)\",\n    \"function calculatePotentialPayout(bytes32 eventId, uint256 amount, bool outcome) external view returns (uint256)\"\n];\n// USDC Contract ABI (updated for full functionality)\nconst USDC_ABI = [\n    \"function balanceOf(address owner) external view returns (uint256)\",\n    \"function approve(address spender, uint256 amount) external returns (bool)\",\n    \"function allowance(address owner, address spender) external view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) external returns (bool)\",\n    \"function transferFrom(address from, address to, uint256 amount) external returns (bool)\"\n];\nclass ContractManager {\n    async initialize(signer) {\n        this.signer = signer;\n        // Initialize contracts with USDC instead of BET token\n        this.betSwapAIContract = new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(\"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\", BETSWAP_AI_ABI, signer);\n        this.usdcContract = new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(\"0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238\", USDC_ABI, signer);\n    }\n    async getUsdcBalance(account) {\n        if (!this.usdcContract) throw new Error(\"Contract not initialized\");\n        try {\n            console.log(\"\\uD83D\\uDD0D Checking USDC balance for account: \".concat(account));\n            console.log(\"\\uD83C\\uDFE6 USDC Contract: \".concat(await this.usdcContract.getAddress()));\n            // Debug provider and network info\n            const network = await this.provider.getNetwork();\n            console.log(\"\\uD83C\\uDF10 Network: \".concat(network.name, \" (Chain ID: \").concat(network.chainId, \")\"));\n            // Check if we're on the right network (Sepolia = 11155111)\n            if (network.chainId !== BigInt(11155111)) {\n                console.log(\"⚠️ Warning: Not on Sepolia network! Current: \".concat(network.name, \" (\").concat(network.chainId, \")\"));\n            }\n            console.log(\"\\uD83D\\uDCDE Calling balanceOf for account: \".concat(account));\n            // Add more detailed error handling\n            let balance;\n            try {\n                // Try using the provider directly first\n                console.log(\"\\uD83D\\uDD27 Trying direct provider call...\");\n                const data = this.usdcContract.interface.encodeFunctionData(\"balanceOf\", [\n                    account\n                ]);\n                console.log(\"\\uD83D\\uDCE6 Encoded data: \".concat(data));\n                const result = await this.provider.call({\n                    to: await this.usdcContract.getAddress(),\n                    data: data\n                });\n                console.log(\"\\uD83D\\uDCE6 Raw result: \".concat(result));\n                if (result === \"0x\") {\n                    console.log(\"⚠️ Empty result, trying contract method...\");\n                    balance = await this.usdcContract.balanceOf(account);\n                } else {\n                    balance = this.usdcContract.interface.decodeFunctionResult(\"balanceOf\", result)[0];\n                }\n                console.log(\"✅ balanceOf call successful\");\n            } catch (balanceError) {\n                console.error(\"❌ balanceOf call failed:\", balanceError);\n                throw balanceError;\n            }\n            const formattedBalance = ethers__WEBPACK_IMPORTED_MODULE_1__.formatUnits(balance, 6); // USDC has 6 decimals\n            console.log(\"\\uD83D\\uDCB0 Raw balance: \".concat(balance.toString()));\n            console.log(\"\\uD83D\\uDCB0 Formatted balance: \".concat(formattedBalance, \" USDC\"));\n            // Return the actual balance from the contract\n            return formattedBalance;\n        } catch (error) {\n            console.error(\"Error getting USDC balance:\", error);\n            return \"0\";\n        }\n    }\n    async getUsdcBalanceOnNear(account) {\n        // For demo purposes, simulate USDC balance on NEAR\n        // In a real implementation, this would query the NEAR USDC contract\n        try {\n            // Simulate USDC balance on NEAR network\n            const mockBalance = Math.floor(Math.random() * 10000) + 1000; // Random balance between 1000-11000\n            return (mockBalance / 100).toFixed(2); // Format as USDC with 2 decimal places\n        } catch (error) {\n            console.error(\"Error getting NEAR USDC balance:\", error);\n            return \"0.00\";\n        }\n    }\n    async getDynamicOdds(eventId) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        try {\n            // For demo purposes, simulate dynamic odds based on betting volume\n            const baseOdds = 150; // 1.50x base odds\n            const volatility = Math.random() * 100; // Random volatility\n            // Simulate market sentiment (more bets on one side = lower odds for that side)\n            const yesBets = Math.floor(Math.random() * 1000) + 100;\n            const noBets = Math.floor(Math.random() * 1000) + 100;\n            const totalBets = yesBets + noBets;\n            const yesProbability = yesBets / totalBets;\n            const noProbability = noBets / totalBets;\n            // Calculate odds with house edge (0.5%)\n            const houseEdge = 0.995;\n            const yesOdds = Math.max(100, Math.min(1000, Math.floor(1 / yesProbability * houseEdge * 100)));\n            const noOdds = Math.max(100, Math.min(1000, Math.floor(1 / noProbability * houseEdge * 100)));\n            return {\n                yesOdds,\n                noOdds\n            };\n        } catch (error) {\n            console.error(\"Error getting dynamic odds:\", error);\n            return {\n                yesOdds: 150,\n                noOdds: 150\n            }; // Default odds\n        }\n    }\n    async getBettingStats(eventId) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        try {\n            // For demo purposes, simulate betting statistics\n            const total = Math.floor(Math.random() * 10000) + 1000;\n            const yes = Math.floor(Math.random() * total);\n            const no = total - yes;\n            const { yesOdds, noOdds } = await this.getDynamicOdds(eventId);\n            return {\n                total,\n                yes,\n                no,\n                yesOdds,\n                noOdds\n            };\n        } catch (error) {\n            console.error(\"Error getting betting stats:\", error);\n            return {\n                total: 0,\n                yes: 0,\n                no: 0,\n                yesOdds: 150,\n                noOdds: 150\n            };\n        }\n    }\n    async calculatePotentialPayout(eventId, amount, outcome) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        try {\n            const { yesOdds, noOdds } = await this.getDynamicOdds(eventId);\n            const odds = outcome ? yesOdds : noOdds;\n            const amountNum = parseFloat(amount);\n            const payout = amountNum * odds / 100;\n            return payout.toFixed(2);\n        } catch (error) {\n            console.error(\"Error calculating potential payout:\", error);\n            return \"0.00\";\n        }\n    }\n    async placeBet(eventId, amount, outcome) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        const amountWei = ethers__WEBPACK_IMPORTED_MODULE_1__.parseUnits(amount, 6); // USDC has 6 decimals\n        return await this.betSwapAIContract.placeBet(eventId, amountWei, outcome);\n    }\n    async placeCrossChainBet(eventId, amount, outcome, nearAccountId) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        const amountWei = ethers__WEBPACK_IMPORTED_MODULE_1__.parseUnits(amount, 6); // USDC has 6 decimals\n        return await this.betSwapAIContract.placeCrossChainBet(eventId, amountWei, outcome, nearAccountId);\n    }\n    async approveUsdcTokens(spender, amount) {\n        if (!this.usdcContract) throw new Error(\"Contract not initialized\");\n        const amountWei = ethers__WEBPACK_IMPORTED_MODULE_1__.parseUnits(amount, 6); // USDC has 6 decimals\n        return await this.usdcContract.approve(spender, amountWei);\n    }\n    async createBetEvent(title, description, endTime) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        return await this.betSwapAIContract.createBetEvent(title, description, endTime);\n    }\n    async resolveBetWithAI(eventId) {\n        let confidence = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 85;\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        return await this.betSwapAIContract.resolveBetWithAI(eventId, confidence);\n    }\n    async getBetEvent(eventId) {\n        if (!this.betSwapAIContract) throw new Error(\"Contract not initialized\");\n        return await this.betSwapAIContract.getBetEvent(eventId);\n    }\n    constructor(provider){\n        this.signer = null;\n        this.betSwapAIContract = null;\n        this.usdcContract = null;\n        this.provider = provider;\n    }\n}\nconst createContractManager = (provider)=>{\n    return new ContractManager(provider);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/contracts.ts\n"));

/***/ })

});